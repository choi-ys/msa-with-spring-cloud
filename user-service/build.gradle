plugins {
    id 'org.springframework.boot' version '2.6.2'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
}

group = 'io.ecommerce'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    asciidoctorExtensions
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    snippetsDir = file('build/generated-snippets')
    set('springCloudVersion', "2021.0.0")
}

dependencies {
    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation("org.springframework.boot:spring-boot-starter-data-jpa")
    implementation("org.springframework.boot:spring-boot-starter-security")
    implementation("org.springframework.boot:spring-boot-starter-validation")

    implementation("org.springframework.cloud:spring-cloud-starter-netflix-eureka-client")
    implementation("org.springframework.cloud:spring-cloud-starter-config")
    implementation("org.springframework.cloud:spring-cloud-starter-bootstrap")
    implementation("org.springframework.boot:spring-boot-starter-actuator")
    implementation("org.springframework.cloud:spring-cloud-starter-bus-amqp")
    implementation("org.springframework.cloud:spring-cloud-starter-openfeign")
    implementation("org.springframework.cloud:spring-cloud-starter-sleuth")
    implementation("org.springframework.cloud:spring-cloud-sleuth-zipkin")

    // querydsl dependency
    implementation("com.querydsl:querydsl-jpa")
    implementation("com.querydsl:querydsl-collections")
    annotationProcessor("com.querydsl:querydsl-apt")
    annotationProcessor(group: 'com.querydsl', name: 'querydsl-apt', classifier: 'jpa')
    annotationProcessor("jakarta.persistence:jakarta.persistence-api") // java.lang.NoClassDefFoundError: javax.persistence.Entity 대응

    implementation("com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.7.0")
    implementation("com.auth0:java-jwt:3.16.0")

    runtimeOnly("com.h2database:h2")
    runtimeOnly("io.micrometer:micrometer-registry-prometheus")

    compileOnly("org.projectlombok:lombok")
    annotationProcessor("org.projectlombok:lombok")

    developmentOnly("org.springframework.boot:spring-boot-devtools")
    testImplementation("org.springframework.boot:spring-boot-starter-test")
    testImplementation("org.springframework.restdocs:spring-restdocs-mockmvc")
    asciidoctorExtensions("org.springframework.restdocs:spring-restdocs-asciidoctor")
}

test {
    outputs.dir snippetsDir
    useJUnitPlatform()
}

dependencyManagement {
    imports {
        mavenBom("org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}")
    }
}

/* [QueryDSL] Start */
def generated = 'src/main/generated'

// compile시 querydsl의 Qtype 객체 생성 위치 지정
tasks.withType(JavaCompile) {
    options.getGeneratedSourceOutputDirectory().set(file(generated))
}

// java source set 에 querydsl의 Qtype 객체 위치 추가
sourceSets {
    main.java.srcDirs += [generated]
}

// gradle clean 시, Qtype 디렉토리 삭제
clean {
    delete file(generated)
}
/* [QueryDSL] End */

/* [AsciiDoctor:Spring RETS Docs] Start */
asciidoctor {
    configurations 'asciidoctorExtensions'
    inputs.dir snippetsDir
    dependsOn test
}

task copyDocument(type: Copy) {
    dependsOn asciidoctor

    from "${asciidoctor.outputDir}"
    into file("src/main/resources/static/docs")
}

build {
    dependsOn copyDocument
}
/* [AsciiDoctor:Spring RETS Docs] End */

